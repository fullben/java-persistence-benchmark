<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Java Persistence Benchmark Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="server.url" elementType="Argument">
              <stringProp name="Argument.name">server.url</stringProp>
              <stringProp name="Argument.value">${__P(url, localhost)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="server.port" elementType="Argument">
              <stringProp name="Argument.name">server.port</stringProp>
              <stringProp name="Argument.value">${__P(port, 8080)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="server.protocol" elementType="Argument">
              <stringProp name="Argument.name">server.protocol</stringProp>
              <stringProp name="Argument.value">${__P(protocol, http)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="employee.count" elementType="Argument">
              <stringProp name="Argument.name">employee.count</stringProp>
              <stringProp name="Argument.value">${__P(employees, 10)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">The number of employees that will be simulated</stringProp>
            </elementProp>
            <elementProp name="work.duration" elementType="Argument">
              <stringProp name="Argument.name">work.duration</stringProp>
              <stringProp name="Argument.value">${__P(duration, 9000)}</stringProp>
              <stringProp name="Argument.desc">The duration for which the employee work (the five business transactions) will be simulated in milliseconds</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Employee terminal actions" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${employee.count}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="filename">employees.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">username,password</stringProp>
        </CSVDataSet>
        <hashTree/>
        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
          <collectionProp name="AuthManager.auth_list">
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">${server.protocol}://${server.url}:${server.port}/api</stringProp>
              <stringProp name="Authorization.username">${username}</stringProp>
              <stringProp name="Authorization.password">${password}</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
            </elementProp>
          </collectionProp>
          <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
        </AuthManager>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${server.url}</stringProp>
          <stringProp name="HTTPSampler.port">${server.port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${server.protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Setup local cache" enabled="true">
          <stringProp name="TestPlan.comments">Get and pre-process all the data required for performing the transaction calls</stringProp>
        </OnceOnlyController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET employee" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/employees/${username}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Get data of the employee simulated by this thread</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="District and warehouse id extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">empDistrictId;empWarehouseId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..district.id;$..warehouse.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1;1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND;NOT_FOUND</stringProp>
              <stringProp name="Scope.variable"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET home warehouse districts" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/warehouses/${empWarehouseId}/districts</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Get home warehouse district data of the employee</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="District id extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">districtId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$[*]id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="Scope.variable"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="FOREACH district of home warehouse get customers" enabled="true">
            <stringProp name="ForeachController.inputVal">districtId</stringProp>
            <stringProp name="ForeachController.returnVal">currDistrictId</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
            <stringProp name="TestPlan.comments">Get the customer data of the districts of the home warehouse of the employee</stringProp>
          </ForeachController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET district customers" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/warehouses/${empWarehouseId}/districts/${currDistrictId}/customers</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Customer extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">customer_${currDistrictId}</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..[&apos;id&apos;, &apos;email&apos;]</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET carriers" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/carriers</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Get the available carriers</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Carrier id extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">carrierId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET products" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/products</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Get all products and parse the product ids</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Product id extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">productId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get warehouses" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/warehouses</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Get all warehouses and parse the warehouse ids</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Warehouse id extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">warehouseId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <RunTime guiclass="RunTimeGui" testclass="RunTime" testname="Simulate employee work" enabled="true">
          <stringProp name="RunTime.seconds">${work.duration}</stringProp>
        </RunTime>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Perform 1 out of 5 possible tasks" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <intProp name="LoopController.loops">-1</intProp>
          </LoopController>
          <hashTree>
            <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Create a new order" enabled="true">
              <intProp name="ThroughputController.style">1</intProp>
              <boolProp name="ThroughputController.perThread">false</boolProp>
              <intProp name="ThroughputController.maxThroughput">1</intProp>
              <FloatProperty>
                <name>ThroughputController.percentThroughput</name>
                <value>45.0</value>
                <savedValue>0.0</savedValue>
              </FloatProperty>
            </ThroughputController>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Menu step time" enabled="true">
                <stringProp name="ConstantTimer.delay">1500</stringProp>
                <stringProp name="RandomTimer.range">500</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Keying time" enabled="true">
                <stringProp name="ConstantTimer.delay">18000</stringProp>
                <stringProp name="RandomTimer.range">2000</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST new-order" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${orderItems}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/warehouses/${empWarehouseId}/districts/${randomDistrictId}/customers/${randomCustomerId}/orders</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Define new order params" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper
import java.util.concurrent.ThreadLocalRandom

// Warehouse is home warehouse
def warehouseId = vars.get(&quot;empWarehouseId&quot;);

// List of all warehouse ids except for that of the employee&apos;s warehouse
def warehouseIds = new LinkedList&lt;String&gt;(Arrays.asList(vars.get(&quot;warehouseId_ALL&quot;).split(&quot;,&quot;)))
warehouseIds.remove(warehouseId)

// District is one of the home warehouse&apos;s districts, randomly selected
String[] districtIds = vars.get(&quot;districtId_ALL&quot;).split(&quot;,&quot;)
String randomDistrictId = districtIds[ThreadLocalRandom.current().nextInt(districtIds.size())]
vars.put(&quot;randomDistrictId&quot;, randomDistrictId)

// Customer is one of the selected district&apos;s customers, randomly selected
def customers = new JsonSlurper().parseText(&quot;[&quot; + vars.get(&quot;customer_&quot; + randomDistrictId + &quot;_ALL&quot;) + &quot;]&quot;)
def randomCustomer = customers[ThreadLocalRandom.current().nextInt(customers.size())]
vars.put(&quot;randomCustomerId&quot;, randomCustomer.id.toString());

// Number of order items is random between 5 and 15
def itemCount= ThreadLocalRandom.current().nextInt(5, 16)
vars.put(&quot;itemCount&quot;, itemCount.toString())

// Construct individual order items here, as number of items is dynamic
def productIds = vars.get(&quot;productId_ALL&quot;).split(&quot;,&quot;)
def orderItems = &quot;[&quot;
for (i = 0; i &lt; itemCount; i++) {
	def randomProductId = productIds[ThreadLocalRandom.current().nextInt(productIds.size())]
	def quantity = ThreadLocalRandom.current().nextInt(10, 21)
	def supplyingWarehouseId = warehouseId.size() &gt; 0 ? ThreadLocalRandom.current().nextInt(1, 101) &gt; 100 ? warehouseIds[ThreadLocalRandom.current().nextInt(warehouseIds.size())] : warehouseId : warehouseId
	orderItems += &quot;{\&quot;productId\&quot;: \&quot;&quot;+ randomProductId.toString() +&quot;\&quot;,\&quot;quantity\&quot;: &quot; + quantity.toString() + &quot;,\&quot;supplyingWarehouseId\&quot;: \&quot;&quot; + supplyingWarehouseId.toString() + &quot;\&quot;}&quot;
	if (i != itemCount - 1) {
		orderItems += &quot;,&quot;
	}
}
orderItems += &quot;]&quot;
vars.put(&quot;orderItems&quot;, orderItems)
</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert response 201" enabled="false">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49587">201</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Processing duration extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">processingNs</stringProp>
                  <stringProp name="RegexExtractor.regex">Processing-Ns:\s+(.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">-1</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Think time" enabled="true">
                <stringProp name="ConstantTimer.delay">12000</stringProp>
                <stringProp name="RandomTimer.range">1000</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Make a payment" enabled="true">
              <intProp name="ThroughputController.style">1</intProp>
              <boolProp name="ThroughputController.perThread">false</boolProp>
              <intProp name="ThroughputController.maxThroughput">1</intProp>
              <FloatProperty>
                <name>ThroughputController.percentThroughput</name>
                <value>43.0</value>
                <savedValue>0.0</savedValue>
              </FloatProperty>
            </ThroughputController>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Menu step time" enabled="true">
                <stringProp name="ConstantTimer.delay">1500</stringProp>
                <stringProp name="RandomTimer.range">500</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Keying time" enabled="true">
                <stringProp name="ConstantTimer.delay">3000</stringProp>
                <stringProp name="RandomTimer.range">1000</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST payment" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${amount}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/warehouses/${empWarehouseId}/districts/${randomDistrictId}/customers/payments?${customerIdentifier}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Define payment params" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper
import java.util.concurrent.ThreadLocalRandom

// Warehouse is home warehouse
def warehouseId = vars.get(&quot;empWarehouseId&quot;)

// District is one of the home warehouse&apos;s districts, randomly selected
String[] districtIds = vars.get(&quot;districtId_ALL&quot;).split(&quot;,&quot;)
String randomDistrictId = districtIds[ThreadLocalRandom.current().nextInt(districtIds.size())]
vars.put(&quot;randomDistrictId&quot;, randomDistrictId)

// Customer is one of the selected district&apos;s customers, randomly selected
// 60% of the time the email is provided, 40% the id
def customers = new JsonSlurper().parseText(&quot;[&quot; + vars.get(&quot;customer_&quot; + randomDistrictId + &quot;_ALL&quot;) + &quot;]&quot;)
def randomCustomer = customers[ThreadLocalRandom.current().nextInt(customers.size())]
def provideEmail = ThreadLocalRandom.current().nextInt(101) &gt; 61;
vars.put(&quot;customerIdentifier&quot;, provideEmail ? &quot;customerEmail=&quot; + randomCustomer.email.toString() : &quot;customerId=&quot; + randomCustomer.id.toString());


// Amount is random (double) between 1.0 and 5000
def amount = ThreadLocalRandom.current().nextInt(1, 5001)
vars.put(&quot;amount&quot;, String.valueOf(amount));
</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert response 201" enabled="false">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49587">201</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Processing duration extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">processingNs</stringProp>
                  <stringProp name="RegexExtractor.regex">Processing-Ns:\s+(.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">-1</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Think time" enabled="true">
                <stringProp name="ConstantTimer.delay">12000</stringProp>
                <stringProp name="RandomTimer.range">1000</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Request order status" enabled="true">
              <intProp name="ThroughputController.style">1</intProp>
              <boolProp name="ThroughputController.perThread">false</boolProp>
              <intProp name="ThroughputController.maxThroughput">1</intProp>
              <FloatProperty>
                <name>ThroughputController.percentThroughput</name>
                <value>4.0</value>
                <savedValue>0.0</savedValue>
              </FloatProperty>
            </ThroughputController>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Menu step time" enabled="true">
                <stringProp name="ConstantTimer.delay">1500</stringProp>
                <stringProp name="RandomTimer.range">500</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Keying time" enabled="true">
                <stringProp name="ConstantTimer.delay">2000</stringProp>
                <stringProp name="RandomTimer.range">1000</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET order-status" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/warehouses/${empWarehouseId}/districts/${randomDistrictId}/customers/orders/status?${customerIdentifier}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Define order status params" enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper
import java.util.concurrent.ThreadLocalRandom

// Warehouse is home warehouse
def warehouseId = vars.get(&quot;empWarehouseId&quot;);

// District is one of the home warehouse&apos;s districts, randomly selected
String[] districtIds = vars.get(&quot;districtId_ALL&quot;).split(&quot;,&quot;)
String randomDistrictId = districtIds[ThreadLocalRandom.current().nextInt(districtIds.size())]
vars.put(&quot;randomDistrictId&quot;, randomDistrictId);

// Customer is one of the selected district&apos;s customers, randomly selected
// 60% of the time the email is provided, 40% the id
def customers = new JsonSlurper().parseText(&quot;[&quot; + vars.get(&quot;customer_&quot; + randomDistrictId + &quot;_ALL&quot;) + &quot;]&quot;)
def randomCustomer = customers[ThreadLocalRandom.current().nextInt(customers.size())]
def provideEmail = ThreadLocalRandom.current().nextInt(101) &gt; 61;
vars.put(&quot;customerIdentifier&quot;, provideEmail ? &quot;customerEmail=&quot; + randomCustomer.email.toString() : &quot;customerId=&quot; + randomCustomer.id.toString());
</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert response 200" enabled="false">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Processing duration extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">processingNs</stringProp>
                  <stringProp name="RegexExtractor.regex">Processing-Ns:\s+(.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">-1</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Think time" enabled="true">
                <stringProp name="ConstantTimer.delay">10000</stringProp>
                <stringProp name="RandomTimer.range">1000</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Set order fulfillment information" enabled="true">
              <intProp name="ThroughputController.style">1</intProp>
              <boolProp name="ThroughputController.perThread">false</boolProp>
              <intProp name="ThroughputController.maxThroughput">1</intProp>
              <FloatProperty>
                <name>ThroughputController.percentThroughput</name>
                <value>4.0</value>
                <savedValue>0.0</savedValue>
              </FloatProperty>
            </ThroughputController>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Menu step time" enabled="true">
                <stringProp name="ConstantTimer.delay">1500</stringProp>
                <stringProp name="RandomTimer.range">500</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Keying time" enabled="true">
                <stringProp name="ConstantTimer.delay">2000</stringProp>
                <stringProp name="RandomTimer.range">1000</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST delivery" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${randomCarrierId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/warehouses/${empWarehouseId}/deliveries</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Select random carrier id" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import java.util.concurrent.ThreadLocalRandom

// Carrier id is randomly selected from all available carriers
String[] carrierIds = vars.get(&quot;carrierId_ALL&quot;).split(&quot;,&quot;)
String randomValue = carrierIds[ThreadLocalRandom.current().nextInt(carrierIds.length)]
vars.put(&quot;randomCarrierId&quot;, randomValue)
</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert response 201" enabled="false">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49587">201</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Processing duration extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">processingNs</stringProp>
                  <stringProp name="RegexExtractor.regex">Processing-Ns:\s+(.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">-1</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Think time" enabled="true">
                <stringProp name="ConstantTimer.delay">5000</stringProp>
                <stringProp name="RandomTimer.range">1000</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Count low stock products" enabled="true">
              <intProp name="ThroughputController.style">1</intProp>
              <boolProp name="ThroughputController.perThread">false</boolProp>
              <intProp name="ThroughputController.maxThroughput">1</intProp>
              <FloatProperty>
                <name>ThroughputController.percentThroughput</name>
                <value>4.0</value>
                <savedValue>0.0</savedValue>
              </FloatProperty>
            </ThroughputController>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Menu step time" enabled="true">
                <stringProp name="ConstantTimer.delay">1500</stringProp>
                <stringProp name="RandomTimer.range">500</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Keying time" enabled="true">
                <stringProp name="ConstantTimer.delay">2000</stringProp>
                <stringProp name="RandomTimer.range">1000</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET stock-level" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="districtId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${empDistrictId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">districtId</stringProp>
                    </elementProp>
                    <elementProp name="threshold" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${minStockLevel}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">threshold</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/warehouses/${empWarehouseId}/stock-levels</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Define stock level params" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import java.util.concurrent.ThreadLocalRandom

// Minimum stock level is randomly selected from a value between 10 and 20
vars.put(&quot;minStockLevel&quot;, ThreadLocalRandom.current().nextInt(10, 21).toString());
</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert response 200" enabled="false">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Processing duration extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">processingNs</stringProp>
                  <stringProp name="RegexExtractor.regex">Processing-Ns:\s+(.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">-1</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Think time" enabled="true">
                <stringProp name="ConstantTimer.delay">5000</stringProp>
                <stringProp name="RandomTimer.range">1000</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
